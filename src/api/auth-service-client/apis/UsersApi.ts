/* tslint:disable */
/* eslint-disable */
/**
 * auth-service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact:
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
    AddUserRequest,
    AddUserResponse,
    ErrorResponse,
    GetAllResponse,
    SuccessResponse,
    User,
} from '../models';
import {
    AddUserRequestFromJSON,
    AddUserRequestToJSON,
    AddUserResponseFromJSON,
    AddUserResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    GetAllResponseFromJSON,
    GetAllResponseToJSON,
    SuccessResponseFromJSON,
    SuccessResponseToJSON,
    UserFromJSON,
    UserToJSON,
} from '../models';

export interface AddUserOperationRequest {
    addUserRequest: AddUserRequest;
}

export interface DeleteUserRequest {
    userId: string;
}

export interface GetUserRequest {
    userId: string;
    user: User;
}

/**
 * UsersApi - interface
 *
 * @export
 * @interface UsersApiInterface
 */
export interface UsersApiInterface {
    /**
     *
     * @param {AddUserRequest} addUserRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    addUserRaw(
        requestParameters: AddUserOperationRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<AddUserResponse>>;

    /**
     */
    addUser(
        requestParameters: AddUserOperationRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<AddUserResponse>;

    /**
     *
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    deleteUserRaw(
        requestParameters: DeleteUserRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<SuccessResponse>>;

    /**
     */
    deleteUser(
        requestParameters: DeleteUserRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<SuccessResponse>;

    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    getAllUsersRaw(
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<GetAllResponse>>;

    /**
     */
    getAllUsers(
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<GetAllResponse>;

    /**
     *
     * @param {string} userId
     * @param {User} user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    getUserRaw(
        requestParameters: GetUserRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<User>>;

    /**
     */
    getUser(
        requestParameters: GetUserRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<User>;
}

/**
 *
 */
export class UsersApi extends runtime.BaseAPI implements UsersApiInterface {
    /**
     */
    async addUserRaw(
        requestParameters: AddUserOperationRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<AddUserResponse>> {
        if (
            requestParameters.addUserRequest === null ||
            requestParameters.addUserRequest === undefined
        ) {
            throw new runtime.RequiredError(
                'addUserRequest',
                'Required parameter requestParameters.addUserRequest was null or undefined when calling addUser.',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token('token', []);

            if (tokenString) {
                headerParameters['Authorization'] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request(
            {
                path: `/user`,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: AddUserRequestToJSON(requestParameters.addUserRequest),
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, jsonValue =>
            AddUserResponseFromJSON(jsonValue),
        );
    }

    /**
     */
    async addUser(
        requestParameters: AddUserOperationRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<AddUserResponse> {
        const response = await this.addUserRaw(
            requestParameters,
            initOverrides,
        );
        return await response.value();
    }

    /**
     */
    async deleteUserRaw(
        requestParameters: DeleteUserRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<SuccessResponse>> {
        if (
            requestParameters.userId === null ||
            requestParameters.userId === undefined
        ) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter requestParameters.userId was null or undefined when calling deleteUser.',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token('token', []);

            if (tokenString) {
                headerParameters['Authorization'] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request(
            {
                path: `/user/{user_id}`.replace(
                    `{${'user_id'}}`,
                    encodeURIComponent(String(requestParameters.userId)),
                ),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, jsonValue =>
            SuccessResponseFromJSON(jsonValue),
        );
    }

    /**
     */
    async deleteUser(
        requestParameters: DeleteUserRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<SuccessResponse> {
        const response = await this.deleteUserRaw(
            requestParameters,
            initOverrides,
        );
        return await response.value();
    }

    /**
     */
    async getAllUsersRaw(
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<GetAllResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token('token', []);

            if (tokenString) {
                headerParameters['Authorization'] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request(
            {
                path: `/users`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, jsonValue =>
            GetAllResponseFromJSON(jsonValue),
        );
    }

    /**
     */
    async getAllUsers(
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<GetAllResponse> {
        const response = await this.getAllUsersRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getUserRaw(
        requestParameters: GetUserRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<User>> {
        if (
            requestParameters.userId === null ||
            requestParameters.userId === undefined
        ) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter requestParameters.userId was null or undefined when calling getUser.',
            );
        }

        if (
            requestParameters.user === null ||
            requestParameters.user === undefined
        ) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter requestParameters.user was null or undefined when calling getUser.',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token('token', []);

            if (tokenString) {
                headerParameters['Authorization'] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request(
            {
                path: `/user/{user_id}`.replace(
                    `{${'user_id'}}`,
                    encodeURIComponent(String(requestParameters.userId)),
                ),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
                body: UserToJSON(requestParameters.user),
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, jsonValue =>
            UserFromJSON(jsonValue),
        );
    }

    /**
     */
    async getUser(
        requestParameters: GetUserRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<User> {
        const response = await this.getUserRaw(
            requestParameters,
            initOverrides,
        );
        return await response.value();
    }
}
